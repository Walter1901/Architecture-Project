@model List<PrintSystem.Models.User>

@{
    ViewData["Title"] = "Faculty Dashboard";
    var totalStudents = ViewBag.TotalStudents ?? 0;
    var totalQuota = ViewBag.TotalQuotaAllocated ?? 0;
}

<!-- Faculty Dashboard Page -->
<!-- Main management interface for faculty staff to monitor and manage student printing quotas -->
<!-- Features: Statistics overview, student list, quick allocation, quota monitoring -->
<div class="container-fluid mt-4">

    <!-- Success Message Display -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["Success"]
            @if (TempData["AllocationDetails"] != null)
            {
                <br>
        
                <small>@TempData["AllocationDetails"]</small>
            }
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Error Message Display -->
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i> @ViewBag.Error
        </div>
    }

    <!-- Faculty Header Information -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h3><i class="fas fa-university"></i> Faculty of @ViewBag.Faculty</h3>
                    <p class="mb-0">Manager: @ViewBag.Username</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards Row -->
    <div class="row mb-4">
        <!-- Total Students Card -->
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-users fa-2x mb-2"></i>
                    <h4>@totalStudents</h4>
                    <p class="mb-0">Students</p>
                </div>
            </div>
        </div>

        <!-- Total Quota Card -->
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-money-bill fa-2x mb-2"></i>
                    <h4>@totalQuota.ToString("F1") CHF</h4>
                    <p class="mb-0">Total Quota</p>
                </div>
            </div>
        </div>

        <!-- Average per Student Card -->
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-calculator fa-2x mb-2"></i>
                    <h4>@((totalQuota / Math.Max(totalStudents, 1)).ToString("F1")) CHF</h4>
                    <p class="mb-0">Average/Student</p>
                </div>
            </div>
        </div>

        <!-- Low Quota Alert Card -->
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body text-center">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <h4>@(Model?.Count(s => s.AvailableQuota < 10) ?? 0)</h4>
                    <p class="mb-0">Low Quota</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-tools"></i> Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <a href="@Url.Action("AllocateQuota")" class="btn btn-primary btn-lg w-100 mb-2">
                                <i class="fas fa-plus-circle"></i> Allocate Quota
                            </a>
                        </div>
                        <div class="col-md-6">
                            <button class="btn btn-info btn-lg w-100 mb-2" onclick="refreshData()">
                                <i class="fas fa-sync-alt"></i> Refresh Data
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Student List Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-users"></i> Student List</h5>
                </div>
                <div class="card-body">
                    @if (Model != null && Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover" id="studentsTable">
                                <thead class="table-dark">
                                    <tr>
                                        <th><i class="fas fa-user"></i> Username</th>
                                        <th><i class="fas fa-university"></i> Faculty</th>
                                        <th><i class="fas fa-money-bill"></i> Available Quota (CHF)</th>
                                        <th><i class="fas fa-chart-bar"></i> Status</th>
                                        <th><i class="fas fa-tools"></i> Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var student in Model)
                                    {
                                        <tr>
                                            <!-- Student Username -->
                                            <td>
                                                <strong>@student.Username</strong>
                                            </td>

                                            <!-- Faculty Name -->
                                            <td>@student.Faculty</td>

                                            <!-- Available Quota with Color Coding -->
                                            <td>
                                                <span class="badge @(student.AvailableQuota < 10 ? "bg-danger" : student.AvailableQuota < 20 ? "bg-warning" : "bg-success")">
                                                    @student.AvailableQuota.ToString("F2") CHF
                                                </span>
                                            </td>

                                            <!-- Quota Status Indicator -->
                                            <td>
                                                @if (student.AvailableQuota < 5)
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="fas fa-exclamation-triangle"></i> Critical
                                                    </span>
                                                }
                                                else if (student.AvailableQuota < 15)
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="fas fa-exclamation"></i> Low
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="fas fa-check"></i> Normal
                                                    </span>
                                                }
                                            </td>

                                            <!-- Action Buttons -->
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-primary" onclick="quickAllocate('@student.Username', 10)">
                                                        <i class="fas fa-plus"></i> +10 CHF
                                                    </button>
                                                    <button class="btn btn-success" onclick="quickAllocate('@student.Username', 20)">
                                                        <i class="fas fa-plus"></i> +20 CHF
                                                    </button>
                                                    <a href="@Url.Action("StudentDetails", new { username = student.Username })" class="btn btn-info">
                                                        <i class="fas fa-eye"></i> Details
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <!-- Empty State when no students found -->
                        <div class="text-center py-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No Students Found</h5>
                            <p class="text-muted">Students from your faculty will appear here.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Interactive Features -->
<script>
    // Performs quick quota allocation via AJAX
    function quickAllocate(username, amount) {
        if (confirm(`Allocate ${amount} CHF to ${username}?`)) {
            fetch('@Url.Action("QuickAllocate")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `username=${encodeURIComponent(username)}&amount=${amount}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Success: ${data.message}`);
                    location.reload(); // Refresh page to show updated balances
                } else {
                    alert(`Error: ${data.message}`);
                }
            })
            .catch(error => {
                alert('Server communication error');
            });
        }
    }

    // Refreshes the page data
    function refreshData() {
        location.reload();
    }

    // Initialize page functionality when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        if (document.getElementById('studentsTable')) {
            // Initialize table features (sorting, filtering could be added here)
            console.log('Student table loaded successfully');
        }
    });
</script>